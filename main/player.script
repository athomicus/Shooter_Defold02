Health = 100 -- Player's health
rocket_counter = 0
bullet_spawning_speed = 0.5 -- Speed at which bullets are spawned
function init(self)
	msg.post(".", "acquire_input_focus")
	--factory.create("#factory")  #
  self.health = Health -- Initialize health

	timer.delay(bullet_spawning_speed, true, function()
		factory.create("#factory")
       --rocket_counter = rocket_counter + 1
       --pprint(rocket_counter)
		sound.play("#shot")
	end)
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		move_player(-10)
	elseif action_id == hash("right") then 
		move_player(10)
	end		
end

function on_message(self, message_id, message, sender)
    if message_id == hash("move_player") then
        -- Call the move_player function with the offset from the message
         
        move_player(message.offset)
    end
end

function move_player(offset)
	local pos = go.get_position()
	if pos.x + offset < 10 or pos.x + offset > 350 then 
		return -- exit the function
	end 
	pos.x = pos.x + offset
	go.set_position(pos)
  
end


function on_message(self, message_id, message, sender)
	-- Handle incoming messages
	if message_id == hash("trigger_response") and message.enter then
    local enemy_id = go.get_id() -- Get the ID of the current game object  
        --if tostring(what_hitted_enemy):find("Player") then
      if message.other_group == hash("enemies") then
        pprint("gracz zderzenie z: " .. enemy_id )  
        decrease_health(self,10) -- Decrease health by 10 when hit by an enemy
      end
  end

   
end
 
function decrease_health(self,amount)
  self.health=self.health - amount
  msg.post("Hud#progress_bar_player_life","player_health", { health = self.health }) 
  if self.health<= 0 then
    self.health= 0
    --msg.post(".", "release_input_focus") -- Release input focus when health reaches zero
    msg.post("Hud#myGUI", "game_over") -- Notify the HUD GUI about game over
  end
end


