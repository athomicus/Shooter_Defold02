
function init(self)
	--self.time = 0
	--self.pos = go.get_position()
	--go.animate(".", "position.y", go.PLAYBACK_LOOP_PINGPONG, 80, go.EASING_OUTINSINE, 10)
	--go.animate(".", "position.x", go.PLAYBACK_LOOP_PINGPONG, 80, go.EASING_INOUTCIRC, 10)
	
	local pos = go.get_position()	 
	pos.x = pos.x + 80				 
	pos.y = pos.y + 50			 
	
	go.animate(".", "position.x", go.PLAYBACK_LOOP_PINGPONG, pos.x, go.EASING_INOUTSINE, 3) 
	go.animate(".", "position.y", go.PLAYBACK_LOOP_PINGPONG, pos.y, go.EASING_INOUTSINE, 3, 3) 
end
function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if message_id == hash("trigger_response") and message.enter then --message.enter  enter is true and message.enter
		--go.delete() -- destroy ship	
		--sprite.play_flipbook("#sprite", "explosion") musimy uzyc funkcji wlas. sprite do wywolania callback function
		sound.play("#explosion")
		msg.post("Hud#myGUI","hello")
			sprite.play_flipbook("#sprite", "explosion", function()
			go.delete() 
		end) 
		
	end
end

local function sign(n)
	if n>0 then	return 1
	elseif n<0 then return -1
	end
	return 0
end

function update(self, dt)

	--local new_pos
	self.time = self.time + dt
	self.new_pos = self.pos
	--local sine = math.sin(2*self.time)
	--self.new_pos.x = 500+sign(sine) *300*math.abs(sine)^0.2
	--self.new_pos.y =  500-self.time * 10
	--go.set_position(self.new_pos)
	--print(self.new_pos)
end



--[[
--https://defold.com/examples/animation/chained_tween/

local up_down -- <1>
local left_right

function up_down(self) -- <2>
	go.animate(".", "position.y", go.PLAYBACK_ONCE_PINGPONG, 624, go.EASING_INOUTSINE, 2, 0, left_right)
end

function left_right(self) -- <3>
	go.animate(".", "position.x", go.PLAYBACK_ONCE_PINGPONG, 660, go.EASING_INOUTSINE, 2, 0, up_down)    
end

function init(self)
	up_down(self) -- <4>
	go.animate(".", "scale.y", go.PLAYBACK_LOOP_PINGPONG, 0.5, go.EASING_INOUTSINE, 1) -- <5>
	go.animate("#sprite", "tint.x", go.PLAYBACK_LOOP_PINGPONG, 0.0, go.EASING_INOUTSINE, 1.5) -- <6>
end


1. In Lua, local variables must be declared prior to their use.
Since the functions `up_down()` and `left_right()` refer to 
each other we "forward declare" the names `up_down` and 
`left_right` before the function definitions.
	2. This function animates the game object position's y component,
	then calls the function `left_right()` on completion.
		3. This function animates the game object position's x component,
		then calls the function `up_down()` on completion.
			4. Start by calling the `up_down()` function.
				5. In parallel, tween the scale y component.
				6. And the sprite's tint x component (which is the red value).
				--]]