
-- Initialize the score variable to keep track of the player's score
local score = 0

-- Timer variables
local max_time = 30.0  -- Maximum time in seconds
local current_time = max_time
local timer_active = true

function init(self)
	msg.post(".", "acquire_input_focus") -- 
	
	-- Initialize timer display
	update_timer_display(self)
end

function update_timer_display(self)
	 
	local timer_bar_node = gui.get_node ("bar_wave")
	if timer_bar_node then
    local x_bar_size=130
		local fill_percentage = current_time / max_time
		local original_size = gui.get_size(timer_bar_node)
		gui.set_size(timer_bar_node, vmath.vector3(x_bar_size * fill_percentage, original_size.y, original_size.z))
		
		-- Change color based on remaining time
		if fill_percentage > 0.5 then
			gui.set_color(timer_bar_node, vmath.vector4(0.0, 0.8, 0.2, 1.0)) -- Green
		elseif fill_percentage > 0.25 then
			gui.set_color(timer_bar_node, vmath.vector4(1.0, 1.0, 0.0, 1.0)) -- Yellow
		else
			gui.set_color(timer_bar_node, vmath.vector4(1.0, 0.2, 0.0, 1.0)) -- Red
		end
	end
end

function update(self, dt)
	if timer_active and current_time > 0 then
		current_time = current_time - dt
		
		-- Ensure timer doesn't go below 0
		if current_time < 0 then
			current_time = 0
			timer_active = false
			-- Timer has reached zero - you can add game over logic here
			print("Timer finished!")
		end
		
		-- Update the display
		update_timer_display(self)
	end
end

-- Function to handle incoming messages
function on_message(self, message_id, message, sender)
	-- Increment the score by 500 when a message is received
  --print(message_id)
  if message_id == hash("score_up") then
  score = score + 5
  end
	
	-- Update the GUI text node named "score" to display the updated score
	gui.set_text(gui.get_node("score"), score)
end


function on_input(self, action_id, action)
	if action_id == hash("touch") and not action.pressed then  
		local button_left = gui.get_node("button_L") 
    local button_right = gui.get_node("button_R")
      
		if gui.pick_node(button_left, action.x, action.y) then  
			--pprint("LEFT")
      msg.post("Player#player", "move_player", { offset = -10 })
    
    elseif gui.pick_node(button_right, action.x, action.y) then  
			--pprint("RIGHT")
       msg.post("Player#player", "move_player", { offset = 10 })
        
        
    end
  
	end
	 
end
