max_spawn_number = 3
list_of_enemies = {}
speed_attack = 2.2 --speed of attack
enemy_kamikaze = false
player_x = 0
local T = require("main.tools")
function init(self)
    self.spawned_enemy_number = 0
    self.enemy_factory = "#enemy_factory" -- [1]
    self.spawn_timer = timer.delay(0.1, true, function() spawn_enemy(self) end) --[2]
end
--[1] reference, [2] initiate the timer to spawn enemies 

function restart_spawn(self) 
  self.spawned_enemy_number = 0
  max_spawn_number = max_spawn_number + 1  
  msg.post("/Hud#bar_waiting_for_attack", "restart_timer") 
end

function spawn_enemy(self) --spawn enemy and add ID to list_of_enemies
  
    if self.spawned_enemy_number >= max_spawn_number then
       -- pprint(self.spawned_enemy_number)
        pprint("max_spawn_number:"..max_spawn_number)
        --timer.cancel(self.spawn_timer) -- Stop the timer if max number of enemies is reached
        return
    end
    self.spawned_enemy_number = self.spawned_enemy_number + 1
    local pos = vmath.vector3(math.random(30, 300), math.random(350, 550), 0)
    local enemy = factory.create(self.enemy_factory, pos) 
    if enemy then
        table.insert(list_of_enemies, enemy)
    else
        print("Error: Failed to create enemy")
    end
end




function delete_enemy_by_id(enemy_id)
    if enemy_id then
      timer.delay(speed_attack, false, 
        function()
           if go.exists(enemy_id) then
                  go.delete(enemy_id)            
            end
            T.remove_object_from_table(list_of_enemies, enemy_id)  
            --
        end)
    end
end

function delete_enemy_by_id_without_delay(enemy_id)
    if enemy_id then
       
      if go.exists(enemy_id) then
        go.delete(enemy_id)            
      end
      T.remove_object_from_table(list_of_enemies, enemy_id)  
    end
end

function enemy_attack_player(self,enemy_id)
    
    if enemy_id then     
      go.cancel_animations(enemy_id)
      local player_pos = go.get_position("Player#player")
     -- go.animate(enemy_id,"position.x", go.PLAYBACK_ONCE_FORWARD, player_pos.x, go.EASING_INOUTSINE, speed_attack)
     --go.animate(enemy_id,"position.y", go.PLAYBACK_ONCE_FORWARD, -42, go.EASING_INOUTSINE, speed_attack) 
      delete_enemy_by_id(enemy_id)
     
    else
        print("Error: Invalid enemy ID")
    end
end

function count_elements(list)
  return #list
end

function on_message(self, message_id, message, sender)
    if message_id == hash("order_attack") then 
        enemy_kamikaze = true
        for i = #list_of_enemies, 1, -1 do 
          enemy_attack_player(self, list_of_enemies[i])
        end       
    end
    
    if message_id==hash("delete_enemy") then
      local path_sprite = message.enemy_id .. "#sprite"
      delete_enemy_by_id_without_delay(message.enemy_id)  
    end
end


function update(self, dt)
     
   
    if T.is_empty(list_of_enemies) and enemy_kamikaze  then        
      enemy_kamikaze = false     
      restart_spawn(self)
    end

    if enemy_kamikaze then
      for i, enemy_id in ipairs(list_of_enemies) do
        if go.get_position(enemy_id) then
            local player_pos = go.get_position("Player#player")
            player_pos.y = -90    
            local enemy_pos = go.get_position(enemy_id)  
            
            local direction = vmath.normalize(player_pos - enemy_pos)
            local speed = 1200 -- pixels per second, adjust as needed
            local new_x = enemy_pos.x + direction.x * speed * dt + math.random(-5, 5)
            local new_y = enemy_pos.y + direction.y * speed / 4 * dt
            local new_pos = vmath.vector3(new_x, new_y, enemy_pos.z)
            go.set_position(new_pos, enemy_id)
        end
      end
    end
    
end


